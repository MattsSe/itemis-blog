/*
 * generated by Xtext 2.10.0
 */
package xtext.workshop.advanced.formatting.formatting2

import com.google.common.base.Strings
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import xtext.workshop.advanced.formatting.table.Cell
import xtext.workshop.advanced.formatting.table.DataCell
import xtext.workshop.advanced.formatting.table.HeaderCell
import xtext.workshop.advanced.formatting.table.Table
import xtext.workshop.advanced.formatting.table.TablePackage

class TableFormatter extends AbstractFormatter2 {

	def dispatch void format(Table table, extension IFormattableDocument document) {
		table.regionFor.keyword("{|").append[newLine]
		table.regionFor.keyword("|}").prepend[newLine]
		
		for (row : table.rows) {
			row.regionFor.keyword("|-").prepend[newLine]
			row.regionFor.keyword("|-").append[noSpace]
			var counter = 0
			for (cell : row.cells) {
				cell.regionFor.keyword(cell.keyword).append[noSpace]
				val cellLength = table.getMaxColumnLength(counter) - cell.regionForEObject.length
				if(cell.text!==null)
					cell.regionFor.feature(TablePackage.Literals.CELL__TEXT).append[space = Strings.repeat(" ", cellLength)]
				counter++
			}
		}
	}

	def dispatch getKeyword(HeaderCell cell) { "!" }
	def dispatch getKeyword(DataCell cell) { "|" }

	def getMaxColumnLength(Table table, int columnIndex) {
		var maxLength = 0
		for (row : table.rows) {
			var cellLength = row.cells.get(columnIndex).regionForEObject.length
			if (cellLength > maxLength)
				maxLength = cellLength
		}
		return maxLength
	}
}
