/*
 * generated by Xtext 2.10.0
 */
grammar InternalTable;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.workshop.advanced.formatting.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.workshop.advanced.formatting.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.workshop.advanced.formatting.services.TableGrammarAccess;

}

@parser::members {

 	private TableGrammarAccess grammarAccess;

    public InternalTableParser(TokenStream input, TableGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Document";
   	}

   	@Override
   	protected TableGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDocumentRule()); }
	iv_ruleDocument=ruleDocument
	{ $current=$iv_ruleDocument.current; }
	EOF;

// Rule Document
ruleDocument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDocumentAccess().getElementsTableParserRuleCall_0());
			}
			lv_elements_0_0=ruleTable
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDocumentRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"xtext.workshop.advanced.formatting.Table.Table");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTableAccess().getTableAction_0(),
					$current);
			}
		)
		otherlv_1='{|'
		{
			newLeafNode(otherlv_1, grammarAccess.getTableAccess().getLeftCurlyBracketVerticalLineKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getCaptionCaptionParserRuleCall_2_0());
				}
				lv_caption_2_0=ruleCaption
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					set(
						$current,
						"caption",
						lv_caption_2_0,
						"xtext.workshop.advanced.formatting.Table.Caption");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getRowsRowParserRuleCall_3_0());
				}
				lv_rows_3_0=ruleRow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"rows",
						lv_rows_3_0,
						"xtext.workshop.advanced.formatting.Table.Row");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='|}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTableAccess().getVerticalLineRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCaption
entryRuleCaption returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaptionRule()); }
	iv_ruleCaption=ruleCaption
	{ $current=$iv_ruleCaption.current; }
	EOF;

// Rule Caption
ruleCaption returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='|+'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaptionAccess().getVerticalLinePlusSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaptionAccess().getLabelLabelParserRuleCall_1_0());
				}
				lv_label_1_0=ruleLabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaptionRule());
					}
					set(
						$current,
						"label",
						lv_label_1_0,
						"xtext.workshop.advanced.formatting.Table.Label");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRow
entryRuleRow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRowRule()); }
	iv_ruleRow=ruleRow
	{ $current=$iv_ruleRow.current; }
	EOF;

// Rule Row
ruleRow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRowAccess().getRowAction_0(),
					$current);
			}
		)
		otherlv_1='|-'
		{
			newLeafNode(otherlv_1, grammarAccess.getRowAccess().getVerticalLineHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRowAccess().getCellsCellParserRuleCall_2_0());
				}
				lv_cells_2_0=ruleCell
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowRule());
					}
					add(
						$current,
						"cells",
						lv_cells_2_0,
						"xtext.workshop.advanced.formatting.Table.Cell");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCell
entryRuleCell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCellRule()); }
	iv_ruleCell=ruleCell
	{ $current=$iv_ruleCell.current; }
	EOF;

// Rule Cell
ruleCell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCellAccess().getHeaderCellParserRuleCall_0());
		}
		this_HeaderCell_0=ruleHeaderCell
		{
			$current = $this_HeaderCell_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCellAccess().getDataCellParserRuleCall_1());
		}
		this_DataCell_1=ruleDataCell
		{
			$current = $this_DataCell_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHeaderCell
entryRuleHeaderCell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeaderCellRule()); }
	iv_ruleHeaderCell=ruleHeaderCell
	{ $current=$iv_ruleHeaderCell.current; }
	EOF;

// Rule HeaderCell
ruleHeaderCell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!'
		{
			newLeafNode(otherlv_0, grammarAccess.getHeaderCellAccess().getExclamationMarkKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHeaderCellAccess().getTextLabelParserRuleCall_1_0());
				}
				lv_text_1_0=ruleLabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeaderCellRule());
					}
					set(
						$current,
						"text",
						lv_text_1_0,
						"xtext.workshop.advanced.formatting.Table.Label");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDataCell
entryRuleDataCell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataCellRule()); }
	iv_ruleDataCell=ruleDataCell
	{ $current=$iv_ruleDataCell.current; }
	EOF;

// Rule DataCell
ruleDataCell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='|'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataCellAccess().getVerticalLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDataCellAccess().getTextLabelParserRuleCall_1_0());
				}
				lv_text_1_0=ruleLabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataCellRule());
					}
					set(
						$current,
						"text",
						lv_text_1_0,
						"xtext.workshop.advanced.formatting.Table.Label");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLabel
entryRuleLabel returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	iv_ruleLabel=ruleLabel
	{ $current=$iv_ruleLabel.current.getText(); }
	EOF;

// Rule Label
ruleLabel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getLabelAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getLabelAccess().getSTRINGTerminalRuleCall_1());
		}
		    |
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getLabelAccess().getINTTerminalRuleCall_2());
		}
		    |
		this_WS_3=RULE_WS
		{
			$current.merge(this_WS_3);
		}
		{
			newLeafNode(this_WS_3, grammarAccess.getLabelAccess().getWSTerminalRuleCall_3());
		}
		    |
		this_ANY_OTHER_4=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_4);
		}
		{
			newLeafNode(this_ANY_OTHER_4, grammarAccess.getLabelAccess().getANY_OTHERTerminalRuleCall_4());
		}
	)*
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
