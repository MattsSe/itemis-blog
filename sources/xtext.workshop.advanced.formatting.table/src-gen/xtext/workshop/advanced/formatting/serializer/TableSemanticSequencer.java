/*
 * generated by Xtext 2.10.0
 */
package xtext.workshop.advanced.formatting.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xtext.workshop.advanced.formatting.services.TableGrammarAccess;
import xtext.workshop.advanced.formatting.table.Caption;
import xtext.workshop.advanced.formatting.table.DataCell;
import xtext.workshop.advanced.formatting.table.Document;
import xtext.workshop.advanced.formatting.table.HeaderCell;
import xtext.workshop.advanced.formatting.table.Row;
import xtext.workshop.advanced.formatting.table.Table;
import xtext.workshop.advanced.formatting.table.TablePackage;

@SuppressWarnings("all")
public class TableSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TableGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TablePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TablePackage.CAPTION:
				sequence_Caption(context, (Caption) semanticObject); 
				return; 
			case TablePackage.DATA_CELL:
				sequence_DataCell(context, (DataCell) semanticObject); 
				return; 
			case TablePackage.DOCUMENT:
				sequence_Document(context, (Document) semanticObject); 
				return; 
			case TablePackage.HEADER_CELL:
				sequence_HeaderCell(context, (HeaderCell) semanticObject); 
				return; 
			case TablePackage.ROW:
				sequence_Row(context, (Row) semanticObject); 
				return; 
			case TablePackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Caption returns Caption
	 *
	 * Constraint:
	 *     label=Label
	 */
	protected void sequence_Caption(ISerializationContext context, Caption semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TablePackage.Literals.CAPTION__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TablePackage.Literals.CAPTION__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCaptionAccess().getLabelLabelParserRuleCall_1_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Cell returns DataCell
	 *     DataCell returns DataCell
	 *
	 * Constraint:
	 *     text=Label
	 */
	protected void sequence_DataCell(ISerializationContext context, DataCell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TablePackage.Literals.CELL__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TablePackage.Literals.CELL__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataCellAccess().getTextLabelParserRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Document returns Document
	 *
	 * Constraint:
	 *     elements+=Table+
	 */
	protected void sequence_Document(ISerializationContext context, Document semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Cell returns HeaderCell
	 *     HeaderCell returns HeaderCell
	 *
	 * Constraint:
	 *     text=Label
	 */
	protected void sequence_HeaderCell(ISerializationContext context, HeaderCell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TablePackage.Literals.CELL__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TablePackage.Literals.CELL__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHeaderCellAccess().getTextLabelParserRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Row returns Row
	 *
	 * Constraint:
	 *     cells+=Cell*
	 */
	protected void sequence_Row(ISerializationContext context, Row semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (caption=Caption? rows+=Row*)
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
