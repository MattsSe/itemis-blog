/*
 * generated by Xtext 2.10.0
 */
package xtext.workshop.advanced.formatting.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TableGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.workshop.advanced.formatting.Table.Document");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTableParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//// see https://www.mediawiki.org/wiki/Help:Tables
		//Document:
		//	elements+=Table*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Table*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Table
		public RuleCall getElementsTableParserRuleCall_0() { return cElementsTableParserRuleCall_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.workshop.advanced.formatting.Table.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCaptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCaptionCaptionParserRuleCall_2_0 = (RuleCall)cCaptionAssignment_2.eContents().get(0);
		private final Assignment cRowsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowsRowParserRuleCall_3_0 = (RuleCall)cRowsAssignment_3.eContents().get(0);
		private final Keyword cVerticalLineRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Table:
		//	{Table}
		//	'{|'
		//	caption=Caption?
		//	rows+=Row* '|}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Table} '{|' caption=Caption? rows+=Row* '|}'
		public Group getGroup() { return cGroup; }
		
		//{Table}
		public Action getTableAction_0() { return cTableAction_0; }
		
		//'{|'
		public Keyword getLeftCurlyBracketVerticalLineKeyword_1() { return cLeftCurlyBracketVerticalLineKeyword_1; }
		
		//caption=Caption?
		public Assignment getCaptionAssignment_2() { return cCaptionAssignment_2; }
		
		//Caption
		public RuleCall getCaptionCaptionParserRuleCall_2_0() { return cCaptionCaptionParserRuleCall_2_0; }
		
		//rows+=Row*
		public Assignment getRowsAssignment_3() { return cRowsAssignment_3; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_3_0() { return cRowsRowParserRuleCall_3_0; }
		
		//'|}'
		public Keyword getVerticalLineRightCurlyBracketKeyword_4() { return cVerticalLineRightCurlyBracketKeyword_4; }
	}
	public class CaptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.workshop.advanced.formatting.Table.Caption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLinePlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//Caption:
		//	'|+' label=Label;
		@Override public ParserRule getRule() { return rule; }
		
		//'|+' label=Label
		public Group getGroup() { return cGroup; }
		
		//'|+'
		public Keyword getVerticalLinePlusSignKeyword_0() { return cVerticalLinePlusSignKeyword_0; }
		
		//label=Label
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.workshop.advanced.formatting.Table.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVerticalLineHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCellsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCellsCellParserRuleCall_2_0 = (RuleCall)cCellsAssignment_2.eContents().get(0);
		
		//Row:
		//	{Row}
		//	'|-' cells+=Cell*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Row} '|-' cells+=Cell*
		public Group getGroup() { return cGroup; }
		
		//{Row}
		public Action getRowAction_0() { return cRowAction_0; }
		
		//'|-'
		public Keyword getVerticalLineHyphenMinusKeyword_1() { return cVerticalLineHyphenMinusKeyword_1; }
		
		//cells+=Cell*
		public Assignment getCellsAssignment_2() { return cCellsAssignment_2; }
		
		//Cell
		public RuleCall getCellsCellParserRuleCall_2_0() { return cCellsCellParserRuleCall_2_0; }
	}
	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.workshop.advanced.formatting.Table.Cell");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHeaderCellParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataCellParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Cell:
		//	HeaderCell | DataCell;
		@Override public ParserRule getRule() { return rule; }
		
		//HeaderCell | DataCell
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HeaderCell
		public RuleCall getHeaderCellParserRuleCall_0() { return cHeaderCellParserRuleCall_0; }
		
		//DataCell
		public RuleCall getDataCellParserRuleCall_1() { return cDataCellParserRuleCall_1; }
	}
	public class HeaderCellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.workshop.advanced.formatting.Table.HeaderCell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextLabelParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//HeaderCell:
		//	'!' text=Label;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' text=Label
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//text=Label
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//Label
		public RuleCall getTextLabelParserRuleCall_1_0() { return cTextLabelParserRuleCall_1_0; }
	}
	public class DataCellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.workshop.advanced.formatting.Table.DataCell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextLabelParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//DataCell:
		//	'|' text=Label;
		@Override public ParserRule getRule() { return rule; }
		
		//'|' text=Label
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//text=Label
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//Label
		public RuleCall getTextLabelParserRuleCall_1_0() { return cTextLabelParserRuleCall_1_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.workshop.advanced.formatting.Table.Label");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cANY_OTHERTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Label:
		//	(ID | STRING | INT | WS | ANY_OTHER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | STRING | INT | WS | ANY_OTHER)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_4() { return cANY_OTHERTerminalRuleCall_4; }
	}
	
	
	private final DocumentElements pDocument;
	private final TableElements pTable;
	private final CaptionElements pCaption;
	private final RowElements pRow;
	private final CellElements pCell;
	private final HeaderCellElements pHeaderCell;
	private final DataCellElements pDataCell;
	private final LabelElements pLabel;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TableGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDocument = new DocumentElements();
		this.pTable = new TableElements();
		this.pCaption = new CaptionElements();
		this.pRow = new RowElements();
		this.pCell = new CellElements();
		this.pHeaderCell = new HeaderCellElements();
		this.pDataCell = new DataCellElements();
		this.pLabel = new LabelElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.workshop.advanced.formatting.Table".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// see https://www.mediawiki.org/wiki/Help:Tables
	//Document:
	//	elements+=Table*;
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}
	
	//Table:
	//	{Table}
	//	'{|'
	//	caption=Caption?
	//	rows+=Row* '|}';
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Caption:
	//	'|+' label=Label;
	public CaptionElements getCaptionAccess() {
		return pCaption;
	}
	
	public ParserRule getCaptionRule() {
		return getCaptionAccess().getRule();
	}
	
	//Row:
	//	{Row}
	//	'|-' cells+=Cell*;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//Cell:
	//	HeaderCell | DataCell;
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}
	
	//HeaderCell:
	//	'!' text=Label;
	public HeaderCellElements getHeaderCellAccess() {
		return pHeaderCell;
	}
	
	public ParserRule getHeaderCellRule() {
		return getHeaderCellAccess().getRule();
	}
	
	//DataCell:
	//	'|' text=Label;
	public DataCellElements getDataCellAccess() {
		return pDataCell;
	}
	
	public ParserRule getDataCellRule() {
		return getDataCellAccess().getRule();
	}
	
	//Label:
	//	(ID | STRING | INT | WS | ANY_OTHER)*;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
