/**
 * generated by Xtext 2.10.0
 */
package xtext.workshop.advanced.formatting.formatting2;

import com.google.common.base.Strings;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.IEObjectRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegionsFinder;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import xtext.workshop.advanced.formatting.table.Cell;
import xtext.workshop.advanced.formatting.table.DataCell;
import xtext.workshop.advanced.formatting.table.HeaderCell;
import xtext.workshop.advanced.formatting.table.Row;
import xtext.workshop.advanced.formatting.table.Table;
import xtext.workshop.advanced.formatting.table.TablePackage;

@SuppressWarnings("all")
public class TableFormatter extends AbstractFormatter2 {
  protected void _format(final Table table, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(table);
    ISemanticRegion _keyword = _regionFor.keyword("{|");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(table);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("|}");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_1, _function_1);
    EList<Row> _rows = table.getRows();
    for (final Row row : _rows) {
      {
        ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(row);
        ISemanticRegion _keyword_2 = _regionFor_2.keyword("|-");
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.prepend(_keyword_2, _function_2);
        ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(row);
        ISemanticRegion _keyword_3 = _regionFor_3.keyword("|-");
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        document.append(_keyword_3, _function_3);
        int counter = 0;
        EList<Cell> _cells = row.getCells();
        for (final Cell cell : _cells) {
          {
            ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(cell);
            String _keyword_4 = this.getKeyword(cell);
            ISemanticRegion _keyword_5 = _regionFor_4.keyword(_keyword_4);
            final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
              it.noSpace();
            };
            document.append(_keyword_5, _function_4);
            int _maxColumnLength = this.getMaxColumnLength(table, counter);
            IEObjectRegion _regionForEObject = this.textRegionExtensions.regionForEObject(cell);
            int _length = _regionForEObject.getLength();
            final int cellLength = (_maxColumnLength - _length);
            String _text = cell.getText();
            boolean _tripleNotEquals = (_text != null);
            if (_tripleNotEquals) {
              ISemanticRegionsFinder _regionFor_5 = this.textRegionExtensions.regionFor(cell);
              ISemanticRegion _feature = _regionFor_5.feature(TablePackage.Literals.CELL__TEXT);
              final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
                String _repeat = Strings.repeat(" ", cellLength);
                it.setSpace(_repeat);
              };
              document.append(_feature, _function_5);
            }
            counter++;
          }
        }
      }
    }
  }
  
  protected String _getKeyword(final HeaderCell cell) {
    return "!";
  }
  
  protected String _getKeyword(final DataCell cell) {
    return "|";
  }
  
  public int getMaxColumnLength(final Table table, final int columnIndex) {
    int maxLength = 0;
    EList<Row> _rows = table.getRows();
    for (final Row row : _rows) {
      {
        EList<Cell> _cells = row.getCells();
        Cell _get = _cells.get(columnIndex);
        IEObjectRegion _regionForEObject = this.textRegionExtensions.regionForEObject(_get);
        int cellLength = _regionForEObject.getLength();
        if ((cellLength > maxLength)) {
          maxLength = cellLength;
        }
      }
    }
    return maxLength;
  }
  
  public void format(final Object table, final IFormattableDocument document) {
    if (table instanceof XtextResource) {
      _format((XtextResource)table, document);
      return;
    } else if (table instanceof Table) {
      _format((Table)table, document);
      return;
    } else if (table instanceof EObject) {
      _format((EObject)table, document);
      return;
    } else if (table == null) {
      _format((Void)null, document);
      return;
    } else if (table != null) {
      _format(table, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(table, document).toString());
    }
  }
  
  public String getKeyword(final Cell cell) {
    if (cell instanceof DataCell) {
      return _getKeyword((DataCell)cell);
    } else if (cell instanceof HeaderCell) {
      return _getKeyword((HeaderCell)cell);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(cell).toString());
    }
  }
}
