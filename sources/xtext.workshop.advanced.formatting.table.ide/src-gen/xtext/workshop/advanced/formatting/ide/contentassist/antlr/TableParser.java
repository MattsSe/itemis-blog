/*
 * generated by Xtext 2.10.0
 */
package xtext.workshop.advanced.formatting.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import xtext.workshop.advanced.formatting.ide.contentassist.antlr.internal.InternalTableParser;
import xtext.workshop.advanced.formatting.services.TableGrammarAccess;

public class TableParser extends AbstractContentAssistParser {

	@Inject
	private TableGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTableParser createParser() {
		InternalTableParser result = new InternalTableParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCellAccess().getAlternatives(), "rule__Cell__Alternatives");
					put(grammarAccess.getLabelAccess().getAlternatives(), "rule__Label__Alternatives");
					put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
					put(grammarAccess.getCaptionAccess().getGroup(), "rule__Caption__Group__0");
					put(grammarAccess.getRowAccess().getGroup(), "rule__Row__Group__0");
					put(grammarAccess.getHeaderCellAccess().getGroup(), "rule__HeaderCell__Group__0");
					put(grammarAccess.getDataCellAccess().getGroup(), "rule__DataCell__Group__0");
					put(grammarAccess.getDocumentAccess().getElementsAssignment(), "rule__Document__ElementsAssignment");
					put(grammarAccess.getTableAccess().getCaptionAssignment_2(), "rule__Table__CaptionAssignment_2");
					put(grammarAccess.getTableAccess().getRowsAssignment_3(), "rule__Table__RowsAssignment_3");
					put(grammarAccess.getCaptionAccess().getLabelAssignment_1(), "rule__Caption__LabelAssignment_1");
					put(grammarAccess.getRowAccess().getCellsAssignment_2(), "rule__Row__CellsAssignment_2");
					put(grammarAccess.getHeaderCellAccess().getTextAssignment_1(), "rule__HeaderCell__TextAssignment_1");
					put(grammarAccess.getDataCellAccess().getTextAssignment_1(), "rule__DataCell__TextAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalTableParser typedParser = (InternalTableParser) parser;
			typedParser.entryRuleDocument();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TableGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TableGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
